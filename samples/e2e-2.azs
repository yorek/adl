#
# Full End-To-End sample
#

location use 'eastus';

group create 'dmk1';

storage account create 'dmk1storage' (
	sku: 'Standard_LRS'		
);

eventhubs namespace create 'dmk1ingest' (
	sku: "Standard",
	capacity: 20	
);

eventhubs eventhub create 'dmk1ingest-32' (
	message-retention: 1,
	partition-count: 32
);

eventhubs eventhub consumer-group create 'cosmos';

cosmosdb create 'dmk1cosmosdb';

cosmosdb database create 'streaming';

cosmosdb collection create 'rawdata' (
	partition-key-path: "/eventData/eventId",
	throughput: 20000,
	indexing-policy: @indexing.json
);

appservice plan create 'dmk1plan' (
	number-of-workers: 4,
	sku: "P1"
);

functionapp create 'dmk1func';

functionapp deployment source config-zip 'dmk1func' (
	src: "package.zip"
);

$EVENTHUB_CS = eventhubs namespace authorization-rule keys list 'RootManageSharedAccessKey' (	
	query: "primaryConnectionString"
);

functionapp config appsettings set 'dmk1func' (
	settings: "EventHubsConnectionString=$EVENTHUB_CS"
);

functionapp config appsettings set 'dmk1func' (
	settings: "EventHubName=dmk1ingest-32" 
);

functionapp config appsettings set 'dmk1func' (
	settings: "ConsumerGroup=cosmos"
);

appinsights create 'dmk1appinsights' (
	application-id: "StreamingAtScale"
);

$APPINSIGHTS_KEY = appinsights key list 'dmk1appinsights' (
	query: "properties.InstrumentationKey"
);

functionapp config appsettings set 'dmk1func' (
	settings: "APPINSIGHTS_INSTRUMENTATIONKEY=$APPINSIGHTS_KEY"
);

